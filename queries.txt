/* 
	We want to understand more about the movies that families are watching. The following categories are considered family movies: 
	Animation, Children, Classics, Comedy, Family and Music.

	Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out.

	Check Your Solution
	For this query, you will need 5 tables: Category, Film_Category, Inventory, Rental and Film. Your solution should have three columns: 
	Film title, Category name and Count of Rentals.

	HINT: One way to solve this is to create a count of movies using aggregations, subqueries and Window functions. 	
*/

SELECT t1.category_name,SUM(rental_count) AS tot_rental_orders
FROM
	(SELECT DISTINCT(film_title), 
		category_name, 
		COUNT(rentalid) AS rental_count
	FROM
		(SELECT f.title AS film_title, c.name AS category_name, r.rental_id AS rentalid
		FROM film f
		JOIN film_category fc
		ON f.film_id = fc.film_id
		JOIN category c
		ON fc.category_id = c.category_id
		JOIN inventory i 
		ON i.film_id = f.film_id
		JOIN rental r
		ON r.inventory_id = i.inventory_id
		WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')) sub
	GROUP BY 1,2) t1
GROUP BY t1.category_name
ORDER BY t1.category_name;


/* 
	Now we need to know how the length of rental duration of these family-friendly movies compares to the duration that all movies are rented for. 
	Can you provide a table with the movie titles and divide them into 4 levels (first_quarter, second_quarter, third_quarter, and final_quarter) 
	based on the quartiles (25%, 50%, 75%) of the rental duration for movies across all categories? Make sure to also indicate the category that 
	these family-friendly movies fall into.

	HINT: One way to solve it requires the use of percentiles, Window functions, subqueries or temporary tables.	
*/

SELECT t2.category_name, COUNT(t2.rental_duration) AS rental_count, t2.standard_quartile
FROM
	(SELECT 
		title,
		category_name,
		rental_duration,
		NTILE(4) OVER (ORDER BY rental_duration) as standard_quartile
	FROM
		(SELECT f.title AS title, c.name AS category_name, f.rental_duration AS rental_duration
		FROM film f
		JOIN film_category fc
		ON f.film_id = fc.film_id
		JOIN category c
		ON fc.category_id = c.category_id
		WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')) t1) t2
GROUP BY 1,3
ORDER by 3;


/* 
	We would like to know who were our top 10 paying customers, how many payments they made on a monthly basis during 2007, and what was the amount of the monthly payments. 
	Can you write a query to capture the customer name, month and year of payment, and total payment amount for each month by these top 10 paying customers?

	HINT: One way to solve is to use a subquery, limit within the subquery, and use concatenation to generate the customer name.	
*/

SELECT 
	t1.pay_mon, 
	t1.fullname, 
	t1.pay_countpermon, 
	t1.pay_amount
	
FROM 
	(SELECT DATE_TRUNC('month',p.payment_date) pay_mon, c.first_name || ' ' || c.last_name AS fullname,   
		DENSE_RANK() OVER ( ORDER BY DATE_TRUNC('month',p.payment_date) ) as rank,
		COUNT(*) AS pay_countpermon,                     
		SUM(p.amount) as pay_amount
		
	FROM payment p
	JOIN customer c 
	ON p.customer_id = c.customer_id                 
	GROUP BY 1,2 
	ORDER BY 1) t1
JOIN (SELECT c.first_name || ' ' || c.last_name AS fullname, SUM(p.amount) 
	FROM payment p
	JOIN customer c
	ON p.customer_id = c.customer_id
	GROUP BY 1
	ORDER BY 2 desc
	LIMIT 10) t2
ON t1.fullname = t2.fullname
ORDER BY 2,1;  

/* 
	Finally, for each of these top 10 paying customers, I would like to find out the difference across their monthly payments during 2007. 
	Please go ahead and write a query to compare the payment amounts in each successive month. Repeat this for each of these 10 paying customers. 
	Also, it will be tremendously helpful if you can identify the customer name who paid the most difference in terms of payments.

	Check your solution:
	The customer Eleanor Hunt paid the maximum difference of $64.87 during March 2007 from $22.95 in February of 2007.

	HINT: You can build on the previous questions query to add Window functions and aggregations to get the solution.	
*/

SELECT 
	t1.pay_mon, 
	t1.fullname, 
	t1.pay_countpermon, 
	t1.pay_amount,
    t1.lag,
    (t1.pay_amount - COALESCE(t1.lag,0)) AS diff
FROM 
	( SELECT DATE_TRUNC('month',p.payment_date) pay_mon, c.first_name || ' ' || c.last_name AS fullname,   
		DENSE_RANK() OVER ( ORDER BY DATE_TRUNC('month',p.payment_date) ) as rank,
		COUNT(*) AS pay_countpermon,                     
		SUM(p.amount) as pay_amount,
		LAG( SUM(p.amount) ) OVER ( PARTITION BY c.first_name || ' ' || c.last_name ORDER BY DATE_TRUNC('month',p.payment_date) ) AS lag
		
	FROM payment p
	JOIN customer c 
	ON p.customer_id = c.customer_id                 
	GROUP BY 1,2 
	ORDER BY 1) t1
JOIN ( SELECT c.first_name || ' ' || c.last_name AS fullname, SUM(p.amount) 
	FROM payment p
	JOIN customer c
	ON p.customer_id = c.customer_id
	GROUP BY 1
	ORDER BY 2 desc
	LIMIT 10) t2
ON t1.fullname = t2.fullname
ORDER BY 2,1;SELECT 
	t1.pay_mon, 
	t1.fullname, 
	t1.pay_countpermon, 
	t1.pay_amount,
    t1.lag,
    (t1.pay_amount - COALESCE(t1.lag,0)) AS diff
FROM 
	( SELECT DATE_TRUNC('month',p.payment_date) pay_mon, c.first_name || ' ' || c.last_name AS fullname,   
		DENSE_RANK() OVER ( ORDER BY DATE_TRUNC('month',p.payment_date) ) as rank,
		COUNT(*) AS pay_countpermon,                     
		SUM(p.amount) as pay_amount,
		LAG( SUM(p.amount) ) OVER ( PARTITION BY c.first_name || ' ' || c.last_name ORDER BY DATE_TRUNC('month',p.payment_date) ) AS lag
		
	FROM payment p
	JOIN customer c 
	ON p.customer_id = c.customer_id                 
	GROUP BY 1,2 
	ORDER BY 1) t1
JOIN ( SELECT c.first_name || ' ' || c.last_name AS fullname, SUM(p.amount) 
	FROM payment p
	JOIN customer c
	ON p.customer_id = c.customer_id
	GROUP BY 1
	ORDER BY 2 desc
	LIMIT 10) t2
ON t1.fullname = t2.fullname
ORDER BY 6 DESC;

